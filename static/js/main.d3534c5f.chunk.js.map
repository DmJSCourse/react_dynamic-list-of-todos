{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","todos","selectUser","selectedUserId","controlFilter","currentFilterValue","controlSelect","className","type","placeholder","onChange","event","target","value","selected","map","id","userId","title","completed","includes","classNames","key","checked","readOnly","onClick","CurrentUser","state","user","this","setUserData","previousProps","props","getUserData","then","userData","setState","name","phone","email","clearUser","React","Component","URL_BASE","fetch","response","json","data","App","currentSelectValue","todoData","filteredTodos","filter","todo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3534c5f.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  selectedUserId,\n  controlFilter,\n  currentFilterValue,\n  controlSelect,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <input\n      type=\"text\"\n      placeholder=\"filter by title\"\n      onChange={event => controlFilter(event.target.value)}\n    />\n    <select\n      onChange={event => controlSelect(event.target.value)}\n    >\n      <option selected>all</option>\n      <option>active</option>\n      <option>completed</option>\n    </select>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(({ id, userId, title, completed }) => {\n          if (title && title.includes(currentFilterValue)) {\n            return (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  completed\n                    ? 'TodoList__item--unchecked'\n                    : 'TodoList__item--checked',\n                )}\n                key={id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    userId === selectedUserId\n                      ? 'TodoList__user-button--selected'\n                      : '',\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUser(userId)}\n                >\n                  User&nbsp;\n                  {userId}\n                </button>\n              </li>\n            );\n          }\n\n          return;\n        })}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    userId: propTypes.string.isRequierd,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequiered,\n    createdAt: propTypes.string,\n    updatedAt: propTypes.string,\n  })).isRequired,\n  selectUser: propTypes.func.isRequired,\n  selectedUserId: propTypes.number.isRequired,\n  controlFilter: propTypes.func.isRequired,\n  currentFilterValue: propTypes.string.isRequired,\n  controlSelect: propTypes.func.isRequired,\n  currentSelectValue: propTypes.string.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport propTypes from 'prop-types';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.setUserData();\n  }\n\n  componentDidUpdate(previousProps) {\n    if (previousProps.userId !== this.props.userId) {\n      this.setUserData();\n    }\n  }\n\n  setUserData() {\n    this.props.getUserData(this.props.userId)\n      .then(userData => this.setState({ user: userData }));\n  }\n\n  render() {\n    const { id, name, phone, email } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{ name }</h3>\n        <p className=\"CurrentUser__email\">{ email }</p>\n        <p className=\"CurrentUser__phone\">{ phone }</p>\n        <button\n          className=\"CurrentUser__clearButton\"\n          type=\"button\"\n          onClick={() => this.props.clearUser()}\n        >\n          Clear User\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: propTypes.number.isRequired,\n  getUserData: propTypes.func.isRequired,\n  clearUser: propTypes.func.isRequired,\n};\n","const URL_BASE = 'https://mate-api.herokuapp.com/';\n\nexport function getTodoData() {\n  return fetch(`${URL_BASE}todos`)\n    .then(response => response.json())\n    .then(todoData => todoData.data);\n}\n\nexport function getUserData(userId) {\n  return fetch(`${URL_BASE}users/${userId}`)\n    .then(response => response.json())\n    .then(userData => userData.data);\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodoData, getUserData } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    currentFilterValue: '',\n    currentSelectValue: 'all',\n  };\n\n  componentDidMount() {\n    getTodoData()\n      .then(todoData => this.setState({ todos: todoData }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  controlFilter = (value) => {\n    this.setState({\n      currentFilterValue: value,\n    });\n  }\n\n  controlSelect = (value) => {\n    this.setState({\n      currentSelectValue: value,\n    });\n  }\n\n  render() {\n    const\n      { todos,\n        selectedUserId,\n        currentFilterValue,\n        currentSelectValue } = this.state;\n\n    let filteredTodos = todos;\n\n    switch (currentSelectValue) {\n      case 'active':\n        filteredTodos = todos.filter(todo => todo.completed === false);\n        break;\n      case 'completed':\n        filteredTodos = todos.filter(todo => todo.completed === true);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            controlFilter={this.controlFilter}\n            currentFilterValue={currentFilterValue}\n            controlSelect={this.controlSelect}\n          />\n        </div>\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                getUserData={getUserData}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}